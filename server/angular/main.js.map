{"version":3,"sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/companies/companies.service.ts","./src/app/companies/individual-profile/individual-profile.component.html","./src/app/companies/individual-profile/individual-profile.component.ts","./src/app/companies/view-all/view-all.component.html","./src/app/companies/view-all/view-all.component.ts","./src/app/landing-page/landing-page/landing-page.component.ts","./src/app/landing-page/landing-page/landing-page.component.html","./src/app/nav/nav/nav.component.ts","./src/app/nav/nav/nav.component.html","./src/app/onboarding/basic-info/basic-info.component.ts","./src/app/onboarding/basic-info/basic-info.component.html","./src/app/onboarding/main/main.component.ts","./src/app/onboarding/main/main.component.html","./src/app/onboarding/nav-btns/nav-btns.component.ts","./src/app/onboarding/nav-btns/nav-btns.component.html","./src/app/onboarding/onboarding.service.ts","./src/app/onboarding/preview/preview.component.ts","./src/app/onboarding/preview/preview.component.html","./src/app/onboarding/upload-deck/upload-deck.component.ts","./src/app/onboarding/upload-deck/upload-deck.component.html","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,0C;;;;;;;;;;;;;;;;;;;;;ACXuD;AACkD;AAC9B;AACe;AACzB;;;AAEjE,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,mGAAoB,EAAE;IAC7C;QACE,IAAI,EAAE,OAAO;QACb,QAAQ,EAAE;YACR,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,0EAAa,EAAE;YACtC,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,oFAAgB,EAAE;YAC5C,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,EAAE,kHAA0B,EAAE;SAC9D;KACF;IACD,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,EAAE;CAC/B,CAAC;AAMK,MAAM,gBAAgB;;gFAAhB,gBAAgB;6GAAhB,gBAAgB;iHAHlB,CAAC,iEAAoB,CAAC,MAAM,CAAC,CAAC,EAC7B,yDAAY;mIAEX,gBAAgB,oFAFjB,yDAAY;;;;;;;;;;;;;;;;;;;;;;ACfjB,MAAM,YAAY;IALzB;QAME,UAAK,GAAG,qBAAqB,CAAC;KAC/B;;wEAFY,YAAY;0GAAZ,YAAY;QCPzB,qEAAmB;QACnB,2EAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA2B;AAEF;AACT;AACQ;AACU;AACiB;AACG;AACX;AACgB;AACd;AACV;AAChB;AACM;AACiD;AAC9B;AACpB;;AA2BhD,MAAM,SAAS;;kEAAT,SAAS;uGAAT,SAAS,cAFR,wDAAY;4GADb,EAAE,YATJ;YACP,qEAAa;YACb,iEAAgB;YAChB,wDAAW;YACX,gEAAmB;YACnB,6DAAiB;YACjB,mEAAgB;YAChB,kEAAS;SACV;oIAIU,SAAS,mBAvBlB,wDAAY;QACZ,gEAAY;QACZ,0EAAa;QACb,2FAAkB;QAClB,8FAAmB;QACnB,mFAAgB;QAChB,mGAAoB;QACpB,qFAAgB;QAChB,kHAA0B;QAC1B,qFAAgB,aAGhB,qEAAa;QACb,iEAAgB;QAChB,wDAAW;QACX,gEAAmB;QACnB,6DAAiB;QACjB,mEAAgB;QAChB,kEAAS;;;;;;;;;;;;;;;;;;;ACrC8C;;;AAMpD,MAAM,gBAAgB;IAI3B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAHpC,yBAAyB;QACzB,cAAS,GAAG,4EAAkB,GAAG,OAAO,CAAC;IAEF,CAAC;IAExC,2BAA2B;IAC3B,UAAU,CAAC,SAAiB;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAU,IAAI,CAAC,SAAS,GAAG,UAAU,GAAG,SAAS,CAAC,CAAC;IACzE,CAAC;IAED,8BAA8B;IAC9B,eAAe;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,gBAAgB,CAAC,CAAC;IAC1D,CAAC;;gFAdU,gBAAgB;iHAAhB,gBAAgB,WAAhB,gBAAgB,mBAFf,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGV;AAGE;AAAA;AAAA;AAAA;AAAA;AAED;;;;;;;;AAGD;AAEE;AAAA;AAAA;AAAA;AAAA;AAED;;;;;;AAgBD;AACE;AACF;;;;;;;AADO;AAAA;AAAoB;;;;;;AAN7B;;;;;AAGE;;;;;;;;;;;;;;AAgBF;AAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACF;;;;;;;AAHE;AAEK;AAAA;AAAoB;AAAoB;;;;AC5CjD,MAAO,0BAAP,CAAiC;AASrC,cACU,gBADV,EAEU,KAFV,EAE+B;AADrB;AACA;AAVV,wBAAe,CAAf;AACS,qBAAY,EAAZ;AAWP,SAAK,OAAL,GAAwB,EAAxB;AACA,SAAK,aAAL,GAAqB,EAArB;AACD;;AAEK,UAAQ;AAAA;;AAAA;AACZ;AACA,UAAI,CAAC,KAAI,CAAC,SAAV,EAAqB;AACnB,aAAI,CAAC,SAAL,GAAiB,KAAI,CAAC,KAAL,CAAW,QAAX,CAAoB,QAApB,CAA6B,GAA7B,CAAiC,WAAjC,CAAjB;AACD;;AACD,WAAI,CAAC,OAAL,SAAqB,KAAI,CAAC,UAAL,CAAgB,KAAI,CAAC,SAArB,CAArB,CALY,CAOZ;;AACA,WAAI,CAAC,aAAL,GAAqB,KAAI,CAAC,YAAL,CAAkB,KAAI,CAAC,OAAL,CAAa,IAA/B,CAArB;AARY;AASb;AAED;;;AAGG;;;AACH,eAAa,CAAC,aAAD,EAA6B;AACxC,SAAK,YAAL,GAAoB,MAAM,CAAC,aAAa,CAAC,OAAf,CAAN,GAAgC,CAApD;AACA,SAAK,iBAAL,CAAuB,aAAa,CAAC,OAArC;AACD;AAED;;AAEG;;;AACG,YAAU,CAAC,SAAD,EAAkB;AAAA;;AAAA;AAChC,mBAAa,MAAI,CAAC,gBAAL,CAAsB,UAAtB,CAAiC,SAAjC,EAA4C,SAA5C,EAAb;AADgC;AAEjC;AAED;;AAEG;;;AACH,cAAY,CAAC,IAAD,EAAgC;AAC1C,WAAO,IAAI,CAAC,GAAL,CAAU,IAAD,KAAW;AAAE,SAAG,EAAE,IAAI,CAAC;AAAZ,KAAX,CAAT,CAAP;AACD;AAED;;AAEG;;;AACH,UAAQ;AACN,SAAK,UAAL,CAAgB,IAAhB;AACD;AAED;;AAEG;;;AACH,UAAQ;AACN,SAAK,UAAL,CAAgB,IAAhB;AACD;AAED;;AAEG;;;AACH,iBAAe,CAAC,GAAD,EAAY;AACzB,UAAM,IAAI,GAAG,GAAG,CAAC,QAAJ,EAAb;AACA,SAAK,UAAL,CAAgB,MAAhB,CAAuB,IAAvB;AACD;AAED;;;AAGG;;;AACH,mBAAiB,CAAC,SAAD,EAAkB;AACjC,aAAS,GAAG,cAAc,SAA1B;AACA,UAAM,EAAE,GAAG,QAAQ,CAAC,cAAT,CAAwB,SAAxB,CAAX;AACA,QAAI,EAAJ,EACE,EAAE,CAAC,cAAH,CAAkB;AAChB,cAAQ,EAAE,QADM;AAEhB,WAAK,EAAE,SAFS;AAGhB,YAAM,EAAE;AAHQ,KAAlB;AAKH;AAED;;AAEG;;;AACH,cAAY,CAAC,SAAD,EAAqB;AAC/B,UAAM,SAAS,GAAG,QAAQ,CAAC,cAAT,CAAwB,UAAxB,CAAlB;AACA,QAAI,CAAC,SAAL,EAAgB;AAEhB,QAAI,aAAa,GAAG,SAAS,CAAC,WAA9B;AACA,iBAAa,GAAG,SAAS,KAAK,OAAd,GAAwB,aAAxB,GAAwC,CAAC,aAAzD;AAEA,aAAS,CAAC,QAAV,CAAmB,aAAa,GAAG,IAAnC,EAAyC,CAAzC;AACD;;AAnGoC;;;mBAA1B,0B,EAA0B,iI,EAAA,4H;AAAA,C;;;QAA1B,0B;AAA0B,yC;AAAA;AAAA;;;;;;;;;;;;;;;;;;ADZvC;AACE;AAAI;AAAkB;AACtB;AACE;AACE;AACF;AACA;AACE;AACE;AACE;AAMF;AACA;AACE;AAKF;AACF;AACA;AACE;AAAA,eAAS,yBAAT;AAA8B,OAA9B;AAOA;AAUA;AAAQ;AAAA,eAAS,cAAT;AAAmB,OAAnB;AAAqB;AAAI;AACnC;AACF;AACA;AACE;AACE;AAAqB;AAAA,eAAS,iBAAa,MAAb,CAAT;AAA6B,OAA7B;AAA+B;AACpD;AAAQ;AAAA,eAAS,iBAAa,OAAb,CAAT;AAA8B,OAA9B;AAAgC;AAC1C;AACA;AACE;AAOF;AACF;AACF;AAEA;AAAgB;AAAyB;AAC3C;;;;AA9DM;AAAA;AAGA;AAAA;AASO;AAAA;AAOA;AAAA;AAOL;AAAA,8EAAc,WAAd,EAAc,KAAd,EAAc,sBAAd,EAAc,KAAd,EAAc,MAAd,EAAc,KAAd;AAOkB;AAAA;AAkBA;AAAA;AAUR;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AE7DhB;AACE;AAAG;AAA8C;AACjD;AAAuB;AAAW;AACpC;;;;;;;;AAEE;AAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACE;AAIF;AACA;AACE;AAAI;AAAkB;AACxB;AACF;;;;;AAPM;AAAA;AACA;AAIE;AAAA;;;;ACPN,MAAO,gBAAP,CAAuB;AAG3B,cACU,gBADV,EAEU,MAFV,EAEwB;AADd;AACA;AACN;;AAEE,UAAQ;AAAA;;AAAA;AACZ,WAAI,CAAC,SAAL,SAAuB,KAAI,CAAC,gBAAL,CAAsB,eAAtB,GAAwC,SAAxC,EAAvB;AADY;AAEb;AAED;;;AAGG;;;AACH,gBAAc,CAAC,SAAD,EAAkB;AAC9B,SAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,OAAD,EAAU,SAAV,CAArB;AACD;;AAlB0B;;;mBAAhB,gB,EAAgB,iI,EAAA,oH;AAAA,C;;;QAAhB,gB;AAAgB,+B;AAAA,U;AAAA,S;AAAA,yO;AAAA;AAAA;ADV7B;AACE;AAIA;AACE;AAcF;AACF;;;;AApByB;AAAA;AAMC;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AEAnB,MAAM,oBAAoB;IAE/B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;wFALU,oBAAoB;kHAApB,oBAAoB;QCPjC,yEAAuB;QACrB,yEAAgC;QAC9B,qEAAI;QAAA,kFAAuB;QAAA,0EAAgB;QAAA,qEAAU;QAAA,4DAAO;QAAA,4DAAK;QACjE,oEAAG;QACD,0KAEF;QAAA,4DAAI;QAEJ,yEAAkB;QAChB,uEAAqC;QAAA,uEAAW;QAAA,4DAAI;QACpD,wEACG;QAAA,+FAAmC;QAAA,4DACrC;QACH,4DAAM;QACR,4DAAM;QACR,4DAAM;;;;;;;;;;;;;;;;;;;;;ACRC,MAAM,YAAY;IAEvB,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;wEALU,YAAY;0GAAZ,YAAY;QCPzB,yEAAiB;QACf,oEAA4E;QAC9E,4DAAM;;;;;;;;;;;;;;;;;;;;;;;;ACFN;AACA;;;;;;;;;ACKI;AACG;AAAwB;;;;;;AAO3B;AACG;AAA+B;;;;ADChC,MAAO,kBAAP,CAAyB;AAa7B,cACU,iBADV,EAEU,EAFV,EAEyB;AADf;AACA;AAbV,gCAAuB,KAAvB,CAayB,CAbK;AAE9B;;AACU,oBAAW,IAAI,uDAAJ,EAAX;AACV,wBAA6B;AAC3B,WAAK,EAAE,4BADoB;AAE3B,aAAO,EACL,yEAHyB;AAI3B,SAAG,EAAE;AAAE,gBAAQ,EAAE,uBAAZ;AAAqC,WAAG,EAAE;AAA1C;AAJsB,KAA7B;AAWE,SAAK,aAAL,GAAqB,KAAK,EAAL,CAAQ,KAAR,CAAc;AACjC,UAAI,EAAE,CAAC,KAAK,iBAAL,CAAuB,OAAvB,CAA+B,IAA/B,IAAuC,EAAxC,EAA4C,+DAA5C,CAD2B;AAEjC,iBAAW,EAAE,CACX,KAAK,iBAAL,CAAuB,OAAvB,CAA+B,WAA/B,IAA8C,EADnC,EAEX,+DAFW;AAFoB,KAAd,CAArB;AAOD;;AAED,UAAQ;AACN;AACA,SAAK,QAAL,CAAc,IAAd,CAAmB,KAAK,YAAxB;AACD;;AAEO,MAAJ,IAAI;AACN,WAAO,KAAK,aAAL,CAAmB,GAAnB,CAAuB,MAAvB,CAAP;AACD;;AACc,MAAX,WAAW;AACb,WAAO,KAAK,aAAL,CAAmB,GAAnB,CAAuB,aAAvB,CAAP;AACD;AAED;;AAEG;;;AACG,UAAQ;AAAA;;AAAA;AACZ,WAAI,CAAC,oBAAL,GAA4B,IAA5B,CADY,CAGZ;;AACA,UAAI,KAAI,CAAC,aAAL,CAAmB,OAAvB,EAAgC,OAJpB,CAMZ;;AACA,YAAM,KAAI,CAAC,aAAL,EAAN,CAPY,CASZ;;AACA,aAAO,KAAI,CAAC,iBAAL,CAAuB,QAAvB,EAAP;AAVY;AAWb;AAED;;AAEG;;;AACG,eAAa;AAAA;;AAAA;AACjB,YAAM,SAAS,GAAG,MAAI,CAAC,iBAAL,CAAuB,OAAvB,CAA+B,GAAjD,CADiB,CAGjB;;AACA,YAAI,CAAC,iBAAL,CAAuB,OAAvB,GAAiC,CAAC,SAAD,SACvB,MAAI,CAAC,gBAAL,CAAsB,MAAI,CAAC,aAAL,CAAmB,KAAzC,CADuB,GAE7B;AAF6B,YAGvB,MAAI,CAAC,aAAL,CAAmB,SAAnB,EAA8B,MAAI,CAAC,aAAL,CAAmB,KAAjD,CAHV;AAJiB;AAQlB;AAED;;AAEG;;;AACG,kBAAgB,CAAC,QAAD,EAAkB;AAAA;;AAAA;AACtC,mBAAa,MAAI,CAAC,iBAAL,CAAuB,aAAvB,CAAqC,QAArC,EAA+C,SAA/C,EAAb;AADsC;AAEvC;AAED;;AAEG;;;AACG,eAAa,CAAC,SAAD,EAAoB,QAApB,EAAqC;AAAA;;AAAA;AACtD,mBAAa,MAAI,CAAC,iBAAL,CACV,aADU,CACI,SADJ,EACe,QADf,EAEV,SAFU,EAAb;AADsD;AAIvD;;AAjF4B;;;mBAAlB,kB,EAAkB,mI,EAAA,wH;AAAA,C;;;QAAlB,kB;AAAkB,iC;AAAA;AAAA;AAAA,G;AAAA,W;AAAA,S;AAAA,wR;AAAA;AAAA;AChB/B;AAAI;AAAU;AAEd;AACE;AACE;AAAkB;AAAY;AAC9B;AACA;AAGF;AAEA;AACE;AAAyB;AAAyB;AAClD;AACA;AAGF;AACF;AAEA;AAAc;AAAA,eAAY,cAAZ;AAAsB,OAAtB;AAAwB;;;;AAlBhC;AAAA;AAImB;AAAA;AAQA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACZiC;;;;;;;;;ICCpD,0EAGC;IACC,oEAAG;IAAA,uDAAW;IAAA,4DAAI;IACpB,4DAAM;;;;;IAHJ,2LAAqE;IAElE,0DAAW;IAAX,yEAAW;;;;IAoBlB,qFAGC;IAFC,6VAAoC;IAErC,4DAAiB;;;;IAElB,sFAGC;IAFC,+VAAoC;IAGtC,4DAAkB;;;;IAElB,kFAGC;IAFC,0VAAoC;IAErC,4DAAc;;AD/BZ,MAAM,aAAa;IACxB,YACS,iBAAoC,EACnC,GAAsB;QADvB,sBAAiB,GAAjB,iBAAiB,CAAmB;QACnC,QAAG,GAAH,GAAG,CAAmB;IAC7B,CAAC;IAGJ,QAAQ;QACN,IAAI,CAAC,YAAY,GAAiB,EAAE,CAAC;IACvC,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,YAA0B;QACxC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,qDAAqD;QACrD,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;IAC3B,CAAC;;0EAlBU,aAAa;2GAAb,aAAa,yGAFb,CAAC,kEAAiB,CAAC;QCRhC,yEAAyB;QACvB,yEAAqB;QACnB,yEAAqB;QACnB,yGAKM;QACR,4DAAM;QACN,oEAAwB;QACxB,yEAAqB;QACnB,oEAGE;QACF,qEAAI;QAAA,uDAAwB;QAAA,4DAAK;QACjC,oEAAG;QAAA,wDAA0B;QAAA,4DAAI;QACnC,4DAAM;QACN,qEAAwB;QACxB,0EAAqB;QACnB,sEAAI;QAAA,2EAAe;QAAA,4DAAK;QACxB,wEAAoC;QAAA,8EAAkB;QAAA,4DAAI;QAC5D,4DAAM;QACR,4DAAM;QACN,0EAA8B;QAE5B,kIAGkB;QAElB,oIAIkB;QAElB,4HAGe;QACjB,4DAAM;QACR,4DAAM;;QAvCmB,0DAA4B;QAA5B,gGAA4B;QAS7C,0DAAsD;QAAtD,qOAAsD;QACtD,0IAAiC;QAE/B,0DAAwB;QAAxB,uFAAwB;QACzB,0DAA0B;QAA1B,yFAA0B;QAY5B,0DAAoD;QAApD,oHAAoD;QAKpD,0DAAqD;QAArD,qHAAqD;QAMrD,0DAAiD;QAAjD,iHAAiD;;;;;;;;;;;;;;;;;;;;ACxCgB;;;;;;ICEpE,4EAA+D;IAAnB,oTAAkB;IAC5D,qEACF;IAAA,4DAAS;;ADIN,MAAM,gBAAgB;IAG3B,YAAoB,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;QAF9C,aAAQ,GAAG,IAAI,uDAAY,EAAW,CAAC;IAEU,CAAC;IAE5D,QAAQ,KAAU,CAAC;IAEnB;;OAEG;IACH,IAAI;QACF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,WAAW;QACT,OAAO,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACH,UAAU;QACR,OAAO,CACL,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE;YACzC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CACxC,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,IAAI,IAAI,CAAC,WAAW,EAAE;YAAE,OAAO;QAE/B,IAAI,CAAC,iBAAiB,CAAC,WAAW;YAChC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAC1B,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAC9C,CAAC;IACN,CAAC;;gFAzCU,gBAAgB;8GAAhB,gBAAgB;QCR7B,yEAAsB;QACpB,sEAAK;QACH,kHAES;QACX,4DAAM;QACN,sEAAK;QACH,4EAAsC;QAAjB,wIAAS,UAAM,IAAC;QACnC,uDACF;QAAA,4DAAS;QACX,4DAAM;QACR,4DAAM;;QAToB,0DAAoB;QAApB,oFAAoB;QAMxC,0DACF;QADE,iHACF;;;;;;;;;;;;;;;;;;;;ACPuD;;;AAMpD,MAAM,iBAAiB;IAU5B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QATpC,UAAK,GAAG,CAAC,YAAY,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC,CAAC,2BAA2B;QAI7E,yBAAyB;QACzB,cAAS,GAAG,4EAAkB,GAAG,OAAO,CAAC;QAKvC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACjC,IAAI,CAAC,OAAO,GAAY,EAAE,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,gBAAgB;QACd,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC;IACnE,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,IAAI,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM;YAAE,OAAO;QAE9D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,OAA8C;QAC1D,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CACnB,IAAI,CAAC,SAAS,GAAG,oBAAoB,EACrC,OAAO,CACR,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,UAAU,CAAC,SAAiB,EAAE,QAAkB;QAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAClB,IAAI,CAAC,SAAS,GAAG,kBAAkB,GAAG,SAAS,EAC/C,QAAQ,CACT,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,SAAiB,EAAE,OAAyB;QACxD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAClB,IAAI,CAAC,SAAS,GAAG,iBAAiB,GAAG,SAAS,EAC9C,OAAO,CACR,CAAC;IACJ,CAAC;;kFA9DU,iBAAiB;kHAAjB,iBAAiB,WAAjB,iBAAiB,mBAFhB,MAAM;;;;;;;;;;;;;;;;;;;;;;;ACNpB;;;;;;AAUM,MAAO,gBAAP,CAAuB;AAU3B,cACS,iBADT,EAEU,MAFV,EAEwB;AADf;AACC,yBAAc,CAXxB;;AACU,oBAAW,IAAI,uDAAJ,EAAX;AACV,wBAA6B;AAC3B,WAAK,EAAE,uBADoB;AAE3B,aAAO,EACL,kFAHyB;AAI3B,SAAG,EAAE;AAAE,gBAAQ,EAAE,aAAZ;AAA2B,WAAG,EAAE;AAAhC;AAJsB,KAA7B;AAUI;;AAEJ,UAAQ;AACN;AACA,SAAK,QAAL,CAAc,IAAd,CAAmB,KAAK,YAAxB;AACD;AAED;;;AAGG;;;AACG,SAAO;AAAA;;AAAA;AACX,YAAM,OAAO,GAAG;AAAE,iBAAS,EAAE;AAAb,OAAhB;AACA,YAAM,KAAI,CAAC,iBAAL,CACH,aADG,CACW,KAAI,CAAC,iBAAL,CAAuB,OAAvB,CAA+B,GAD1C,EAC+C,OAD/C,EAEH,SAFG,EAAN,CAFW,CAMX;;AACA,WAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,CAAC,OAAD,EAAU,KAAI,CAAC,iBAAL,CAAuB,OAAvB,CAA+B,GAAzC,CAArB;AAPW;AAQZ;;AAhC0B;;;mBAAhB,gB,EAAgB,mI,EAAA,oH;AAAA,C;;;QAAhB,gB;AAAgB,8B;AAAA;AAAA;AAAA,G;AAAA,W;AAAA,S;AAAA,+J;AAAA;AAAA;ACV7B;AAAI;AAAyB;AAE7B;AACE;AACE;AACE;AACA;AACA;AACF;AACF;AACA;AACE;AAGF;AACF;AAEA;AAAc;AAAA,eAAY,aAAZ;AAAqB,OAArB;AAAuB;;;;AAL/B;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZN;;;;;;;;;ACiBU;AAIE;AACA;AACE;AACA;AAAM;AAAgD;AAAQ;AAEhE;AACA;AAA4B;AAA6B;AACzD;AAAsB;AAAM;AAC9B;;;;;AALU;AAAA;;;;;;AAOV;AAIE;AAAG;AAAuB;AAAsB;AAAM;AAAQ;AAC9D;AAAgB;AAA2C;AAC7D;;;;;;AArBF;AACE;AAcA;AAOF;;;;;AApBK;AAAA;AAcA;AAAA;;;;;;AAQL;AAEE;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AACA;AAAG;AAA6B;AAChC;AAAG;AAAc;AACnB;;;;;AADK;AAAA;;;;;;;;AAtCP;AACE;AAwBA;AAeF;AAEA;AAIE;AAAA;AAAA;AAAA;AAAA;AAEA;AACF;;;;;AAhDQ;AAAA;AAwBA;AAAA;;;;;;AA4Bd;AAGG;AAAuC;;;;AD5DpC,MAAO,mBAAP,CAA0B;AAiB9B,cAAmB,iBAAnB,EAAuD;AAApC;AAhBnB,6BAAoB,KAApB,CAgBuD,CAhB5B;;AAE3B,6BAAoB,KAApB,CAcuD,CAd5B;AAG3B;;AACU,oBAAW,IAAI,uDAAJ,EAAX;AACV,wBAA6B;AAC3B,WAAK,EAAE,kBADoB;AAE3B,aAAO,EAAE,+DAFkB;AAG3B,SAAG,EAAE;AACH,gBAAQ,EAAE,iBADP;AAEH,WAAG,EAAE;AAFF;AAHsB,KAA7B;AAUE,SAAK,QAAL,GAAgB,EAAhB;AACA,SAAK,YAAL,GAAoB,EAApB;AACD,GApB6B,CAsB9B;;;AACO,SAAO,CAAC,KAAD,EAA0B;AAAA;;AACtC;AACA,SAAK,YAAL,GAAoB,EAApB;AAEA,UAAM,WAAW,GAAG,KAAK,CAAC,CAAD,CAAzB;AACA,UAAM,SAAS,GAAG,WAAW,CAAC,SAA9B;AACA,aAAS,CAAC,IAAV;AAAA,4KAAe,WAAO,IAAP,EAAqB;AAClC;AACA,cAAM,QAAQ,GAAG,IAAI,QAAJ,EAAjB;AACA,gBAAQ,CAAC,MAAT,CAAgB,MAAhB,EAAwB,IAAxB,EAA8B,WAAW,CAAC,YAA1C;AACA,aAAI,CAAC,QAAL,GAAgB,WAAW,CAAC,YAA5B,CAJkC,CAMlC;;AACA,aAAI,CAAC,iBAAL,GAAyB,IAAzB,CAPkC,CASlC;;AACA,cAAM,SAAS,GAAG,KAAI,CAAC,iBAAL,CAAuB,OAAvB,CAA+B,GAAjD;AACA,cAAM,cAAc,SAAS,KAAI,CAAC,UAAL,CAAgB,SAAhB,EAA2B,QAA3B,CAA7B;AACA,YAAI,cAAJ,EAAoB,KAAI,CAAC,iBAAL,CAAuB,OAAvB,GAAiC,cAAjC,CAZc,CAclC;;AACA,aAAI,CAAC,iBAAL,GAAyB,KAAzB;AACD,OAhBD;;AAAA;AAAA;AAAA;AAAA;AAiBD;;AAED,UAAQ;AACN;AACA,SAAK,QAAL,CAAc,IAAd,CAAmB,KAAK,YAAxB;AACD;AAED;;AAEG;;;AACG,YAAU,CAAC,SAAD,EAAoB,QAApB,EAAsC;AAAA;;AAAA;AACpD,UAAI;AACF,qBAAa,MAAI,CAAC,iBAAL,CACV,UADU,CACC,SADD,EACY,QADZ,EAEV,SAFU,EAAb;AAGD,OAJD,CAIE,OAAO,CAAP,EAAe;AACf,cAAI,CAAC,YAAL,GAAoB,CAAC,CAAC,UAAtB;AACD;AAPmD;AAQrD;AAED;;AAEG;;;AACH,UAAQ;AACN,SAAK,iBAAL,GAAyB,IAAzB,CADM,CAEN;;AACA,QAAI,KAAK,iBAAL,CAAuB,OAAvB,CAA+B,IAA/B,CAAoC,MAApC,GAA6C,CAAjD,EAAoD;AAClD;AACA,aAAO,KAAK,iBAAL,CAAuB,QAAvB,EAAP;AACD;AACF;;AA5E6B;;;mBAAnB,mB,EAAmB,mI;AAAA,C;;;QAAnB,mB;AAAmB,kC;AAAA;AAAA;AAAA,G;AAAA,U;AAAA,S;AAAA,whB;AAAA;AAAA;ACXhC;AAAI;AAAiB;AAErB;AAEE;AAGE;AAAA,eAAc,mBAAd;AAA6B,OAA7B;AAIA;AAuDF;AACF;AACA;AAKA;AAAoB;AAAkB;AAEtC;AAAc;AAAA,eAAY,cAAZ;AAAsB,OAAtB;AAAwB;;;;AAlElC;AAAA;AA6DD;AAAA;AAGiB;AAAA;;;;;;;;;;;;;;;;;;;;ACzEpB,gFAAgF;AAChF,mEAAmE;AACnE,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,MAAM,EAAE,uBAAuB;CAChC,CAAC;AAEF;;;;;;GAMG;AACH,sEAAsE;;;;;;;;;;;;;;;;;;AChBvB;AAGF;AACY;AAEzD,IAAI,6EAAsB,EAAE;IAC1B,6DAAc,EAAE,CAAC;CAClB;AAED,wEAAwB,CAAC,eAAe,CAAC,sDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { IndividualProfileComponent } from './companies/individual-profile/individual-profile.component';\nimport { ViewAllComponent } from './companies/view-all/view-all.component';\nimport { LandingPageComponent } from './landing-page/landing-page/landing-page.component';\nimport { MainComponent } from './onboarding/main/main.component';\n\nconst routes: Routes = [\n  { path: '', component: LandingPageComponent },\n  {\n    path: 'raise',\n    children: [\n      { path: '', component: MainComponent },\n      { path: 'all', component: ViewAllComponent },\n      { path: ':companyId', component: IndividualProfileComponent },\n    ],\n  },\n  { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'angular-wefunder-hw';\n}\n","<app-nav></app-nav>\n<router-outlet></router-outlet>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavComponent } from './nav/nav/nav.component';\nimport { MainComponent } from './onboarding/main/main.component';\nimport { BasicInfoComponent } from './onboarding/basic-info/basic-info.component';\nimport { UploadDeckComponent } from './onboarding/upload-deck/upload-deck.component';\nimport { PreviewComponent } from './onboarding/preview/preview.component';\nimport { LandingPageComponent } from './landing-page/landing-page/landing-page.component';\nimport { NavBtnsComponent } from './onboarding/nav-btns/nav-btns.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgxFileDropModule } from 'ngx-file-drop';\nimport { HttpClientModule } from '@angular/common/http';\nimport { IndividualProfileComponent } from './companies/individual-profile/individual-profile.component';\nimport { ViewAllComponent } from './companies/view-all/view-all.component';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavComponent,\n    MainComponent,\n    BasicInfoComponent,\n    UploadDeckComponent,\n    PreviewComponent,\n    LandingPageComponent,\n    NavBtnsComponent,\n    IndividualProfileComponent,\n    ViewAllComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgxFileDropModule,\n    HttpClientModule,\n    NgbModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { Company } from '../shared/company';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CompaniesService {\n  // where to send API reqs\n  serverUrl = environment.apiUrl + '/api/';\n\n  constructor(private http: HttpClient) {}\n\n  // get single company by id\n  getCompany(companyId: string) {\n    return this.http.get<Company>(this.serverUrl + 'company/' + companyId);\n  }\n\n  // get all published companies\n  getAllCompanies(): any {\n    return this.http.get(this.serverUrl + 'company/getAll');\n  }\n}\n","<div class=\"holder\">\n  <h2>{{ company.name }}</h2>\n  <div class=\"sh-container\">\n    <p class=\"slide-count\">\n      Slide {{ currentSlide }} of {{ imageUrlArray.length }}\n    </p>\n    <div class=\"slideshow\">\n      <div class=\"arrows\">\n        <div>\n          <div\n            id=\"left\"\n            class=\"left\"\n            (click)=\"goToPrev()\"\n            *ngIf=\"currentSlide !== 1\"\n          ></div>\n        </div>\n        <div>\n          <div\n            id=\"right\"\n            (click)=\"goToNext()\"\n            *ngIf=\"currentSlide !== imageUrlArray.length\"\n          ></div>\n        </div>\n      </div>\n      <ngb-carousel\n        (slide)=\"slideActivate($event)\"\n        #ngcarousel\n        [interval]=\"0\"\n        [animation]=\"false\"\n        [showNavigationArrows]=\"false\"\n        [wrap]=\"false\"\n      >\n        <ng-template\n          ngbSlide\n          *ngFor=\"let img of imageUrlArray; let i = index\"\n          id=\"{{ i.toString() }}\"\n        >\n          <div class=\"testy\">\n            <img src=\"{{ img.url }}\" alt=\"Slide {{ i }}\" />\n          </div>\n        </ng-template>\n\n        <button (click)=\"goToPrev()\">Prev</button>\n      </ngb-carousel>\n    </div>\n    <div class=\"thumbnails\">\n      <div class=\"slide-buttons\">\n        <button class=\"left\" (click)=\"scrollToSide('left')\"></button>\n        <button (click)=\"scrollToSide('right')\"></button>\n      </div>\n      <div class=\"scroller\" id=\"scroller\">\n        <div\n          *ngFor=\"let img of imageUrlArray; let i = index\"\n          (click)=\"navigateToSlide(i)\"\n          [ngClass]=\"{ selected: i === currentSlide - 1 }\"\n        >\n          <img src=\"{{ img.url }}\" alt=\"Slide {{ i }}\" id=\"thumbnail{{ i }}\" />\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p class=\"desc\">{{ company.description }}</p>\n</div>\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { NgbCarousel, NgbSlideEvent } from '@ng-bootstrap/ng-bootstrap';\nimport { Company } from 'src/app/shared/company';\nimport { Direction } from 'src/app/shared/direction';\nimport { CompaniesService } from '../companies.service';\n\n@Component({\n  selector: 'app-individual-profile',\n  templateUrl: './individual-profile.component.html',\n  styleUrls: ['./individual-profile.component.css'],\n})\nexport class IndividualProfileComponent implements OnInit {\n  currentSlide = 1;\n  @Input() companyId = '';\n\n  @ViewChild('ngcarousel', { static: true }) ngCarousel: NgbCarousel;\n  company: Company;\n\n  imageUrlArray: Array<{ url: string }>;\n\n  constructor(\n    private companiesService: CompaniesService,\n    private route: ActivatedRoute\n  ) {\n    this.company = <Company>{};\n    this.imageUrlArray = [];\n  }\n\n  async ngOnInit(): Promise<void> {\n    // if theres no company passed from parent get company from url\n    if (!this.companyId) {\n      this.companyId = this.route.snapshot.paramMap.get('companyId') as string;\n    }\n    this.company = await this.getCompany(this.companyId);\n\n    // create image url array for slideshow\n    this.imageUrlArray = this.mapImageUrls(this.company.deck);\n  }\n\n  /**\n   * gets called on slide change\n   * @param ngbSlideEvent - event with slide change details\n   */\n  slideActivate(ngbSlideEvent: NgbSlideEvent) {\n    this.currentSlide = Number(ngbSlideEvent.current) + 1;\n    this.scrollToThumbnail(ngbSlideEvent.current);\n  }\n\n  /**\n   * returns company by id\n   */\n  async getCompany(companyId: string) {\n    return await this.companiesService.getCompany(companyId).toPromise();\n  }\n\n  /**\n   * map deck into more useable format\n   */\n  mapImageUrls(deck: Array<{ imgUrl: string }>) {\n    return deck.map((page) => ({ url: page.imgUrl }));\n  }\n\n  /**\n   * go to next slide in slideshow\n   */\n  goToNext() {\n    this.ngCarousel.next();\n  }\n\n  /**\n   * go to previous slide in slideshow\n   */\n  goToPrev() {\n    this.ngCarousel.prev();\n  }\n\n  /**\n   * go to slide num\n   */\n  navigateToSlide(num: number) {\n    const item = num.toString();\n    this.ngCarousel.select(item);\n  }\n\n  /**\n   * scroll thumnail container horizontally\n   * @param elementId - id of html element\n   */\n  scrollToThumbnail(elementId: string) {\n    elementId = 'thumbnail' + elementId;\n    const el = document.getElementById(elementId);\n    if (el)\n      el.scrollIntoView({\n        behavior: 'smooth',\n        block: 'nearest',\n        inline: 'center',\n      });\n  }\n\n  /**\n   * big scroll thumbnail bar\n   */\n  scrollToSide(direction: Direction) {\n    const container = document.getElementById('scroller');\n    if (!container) return;\n\n    let widthOfSlider = container.offsetWidth;\n    widthOfSlider = direction === 'right' ? widthOfSlider : -widthOfSlider;\n\n    container.scrollBy(widthOfSlider * 0.85, 0);\n  }\n}\n","<div class=\"container\">\n  <div class=\"no-comps\" *ngIf=\"companies.length === 0\">\n    <p>There are currently no companies raising money</p>\n    <a routerLink=\"/raise\">Raise money</a>\n  </div>\n  <div class=\"grid-cont\">\n    <div\n      *ngFor=\"let company of companies\"\n      (click)=\"goToSinglePage(company._id)\"\n    >\n      <div class=\"img-holder\">\n        <img\n          src=\"{{ company.deck[0].imgUrl }}\"\n          alt=\"Slide 1 of {{ company.name }} deck\"\n        />\n      </div>\n      <div class=\"title-holder\">\n        <h3>{{ company.name }}</h3>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Company } from 'src/app/shared/company';\nimport { CompaniesService } from '../companies.service';\n\n@Component({\n  selector: 'app-view-all',\n  templateUrl: './view-all.component.html',\n  styleUrls: ['./view-all.component.css'],\n})\nexport class ViewAllComponent implements OnInit {\n  companies: Array<Company>; // list of all published companies\n\n  constructor(\n    private companiesService: CompaniesService,\n    private router: Router\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    this.companies = await this.companiesService.getAllCompanies().toPromise();\n  }\n\n  /**\n   * navigate to page of a company on click\n   * @param companyId\n   */\n  goToSinglePage(companyId: string) {\n    this.router.navigate(['raise', companyId]);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-landing-page',\n  templateUrl: './landing-page.component.html',\n  styleUrls: ['./landing-page.component.css']\n})\nexport class LandingPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"inner-landing-page\">\n    <h1>Start raising money in <span id=\"time\">15 minutes</span></h1>\n    <p>\n      We take the pain out of raising money. Raise $50K to $5M from superfans &\n      angel investors who believe in you.\n    </p>\n\n    <div class=\"ctas\">\n      <a routerLink=\"/raise\" class=\"raise\">RAISE MONEY</a>\n      <a routerLink=\"/raise/all\" class=\"navigate-out\"\n        >Or view companies currently raising</a\n      >\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.css']\n})\nexport class NavComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<nav class=\"nav\">\n  <img routerLink=\"\" src=\"../../../assets/ryfunder.png\" alt=\"Ryfunder Logo\" />\n</nav>\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Company } from 'src/app/shared/company';\nimport { slideContent } from 'src/app/shared/slideContent';\nimport { OnboardingService } from '../onboarding.service';\n\n@Component({\n  selector: 'app-basic-info',\n  templateUrl: './basic-info.component.html',\n  styleUrls: ['./basic-info.component.css'],\n})\nexport class BasicInfoComponent implements OnInit {\n  basicInfoForm: FormGroup;\n  attempedToSubmitForm = false; // if someone has attempted to submit form (next)\n\n  // sidepanel information in main onborading component\n  @Output() newSlide = new EventEmitter<slideContent>();\n  slideContent: slideContent = {\n    title: 'Tell us about your company',\n    content:\n      'The first step to raising money on Wefunder is learning more about you!',\n    img: { fileName: 'basic-information.svg', alt: 'photo book' },\n  };\n\n  constructor(\n    private onboardingService: OnboardingService,\n    private fb: FormBuilder\n  ) {\n    this.basicInfoForm = this.fb.group({\n      name: [this.onboardingService.company.name || '', Validators.required],\n      description: [\n        this.onboardingService.company.description || '',\n        Validators.required,\n      ],\n    });\n  }\n\n  ngOnInit(): void {\n    // tell main onboarding component to update sidebar to new info\n    this.newSlide.emit(this.slideContent);\n  }\n\n  get name(): FormControl {\n    return this.basicInfoForm.get('name') as FormControl;\n  }\n  get description(): FormControl {\n    return this.basicInfoForm.get('description') as FormControl;\n  }\n\n  /**\n   * if no errors, create/update the company and go to next step in flow\n   */\n  async nextPage() {\n    this.attempedToSubmitForm = true;\n\n    // if form invalid don't move on\n    if (this.basicInfoForm.invalid) return;\n\n    // update the company\n    await this.modifyCompany();\n\n    // go to next page in onboarding\n    return this.onboardingService.nextPage();\n  }\n\n  /**\n   * update or create new company if none exists\n   */\n  async modifyCompany() {\n    const companyId = this.onboardingService.company._id;\n\n    // if theres no company created yet create a new one\n    this.onboardingService.company = !companyId\n      ? await this.createNewCompany(this.basicInfoForm.value)\n      : // else update current one\n        await this.updateCompany(companyId, this.basicInfoForm.value);\n  }\n\n  /**\n   * creates and returns new company\n   */\n  async createNewCompany(formVals: Company) {\n    return await this.onboardingService.createCompany(formVals).toPromise();\n  }\n\n  /**\n   * updates company and returns updated company\n   */\n  async updateCompany(companyId: string, formVals: Company) {\n    return await this.onboardingService\n      .updateCompany(companyId, formVals)\n      .toPromise();\n  }\n}\n","<h2>Basic Info</h2>\n\n<form [formGroup]=\"basicInfoForm\">\n  <div class=\"form-section\">\n    <label for=\"name\">Company name</label>\n    <input type=\"text\" id=\"name\" formControlName=\"name\" />\n    <span class=\"error\" *ngIf=\"this.attempedToSubmitForm && name.invalid\"\n      >Company name is required</span\n    >\n  </div>\n\n  <div class=\"form-section\">\n    <label for=\"description\">Short company description</label>\n    <textarea name=\"\" id=\"description\" formControlName=\"description\"></textarea>\n    <span class=\"error\" *ngIf=\"this.attempedToSubmitForm && description.invalid\"\n      >Company description is required</span\n    >\n  </div>\n</form>\n\n<app-nav-btns (nextPage)=\"nextPage()\"></app-nav-btns>\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { slideContent } from 'src/app/shared/slideContent';\nimport { OnboardingService } from '../onboarding.service';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.css'],\n  providers: [OnboardingService],\n})\nexport class MainComponent implements OnInit {\n  constructor(\n    public onboardingService: OnboardingService,\n    private cdr: ChangeDetectorRef\n  ) {}\n  slideContent: slideContent;\n\n  ngOnInit(): void {\n    this.slideContent = <slideContent>{};\n  }\n\n  /**\n   * get slide content for sidebar from children and update it\n   */\n  setSlideContent(slideContent: slideContent) {\n    this.slideContent = slideContent;\n    // need to manually redect changes after slide change\n    this.cdr.detectChanges();\n  }\n}\n","<div class=\"m-container\">\n  <div class=\"sidebar\">\n    <div class=\"numbers\">\n      <div\n        *ngFor=\"let page of onboardingService.pages; index as i\"\n        [ngClass]=\"{ 'current-page': page == onboardingService.currentView }\"\n      >\n        <p>{{ i + 1 }}</p>\n      </div>\n    </div>\n    <div class=\"dash\"></div>\n    <div class=\"content\">\n      <img\n        src=\"../../../assets/{{ slideContent.img?.fileName }}\"\n        alt=\"{{ slideContent.img?.alt }}\"\n      />\n      <h3>{{ slideContent.title }}</h3>\n      <p>{{ slideContent.content }}</p>\n    </div>\n    <div class=\"dash\"></div>\n    <div class=\"contact\">\n      <h3>Have questions?</h3>\n      <a href=\"mailto:hello@wefunder.com\">hello@wefunder.com</a>\n    </div>\n  </div>\n  <div class=\"component-holder\">\n    <!-- Stage of flow -->\n    <app-basic-info\n      (newSlide)=\"setSlideContent($event)\"\n      *ngIf=\"onboardingService.currentView === 'basic-info'\"\n    ></app-basic-info>\n\n    <app-upload-deck\n      (newSlide)=\"setSlideContent($event)\"\n      *ngIf=\"onboardingService.currentView === 'upload-deck'\"\n    >\n    </app-upload-deck>\n\n    <app-preview\n      (newSlide)=\"setSlideContent($event)\"\n      *ngIf=\"onboardingService.currentView === 'preview'\"\n    ></app-preview>\n  </div>\n</div>\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { OnboardingService } from '../onboarding.service';\n\n@Component({\n  selector: 'app-nav-btns',\n  templateUrl: './nav-btns.component.html',\n  styleUrls: ['./nav-btns.component.css'],\n})\nexport class NavBtnsComponent implements OnInit {\n  @Output() nextPage = new EventEmitter<boolean>();\n\n  constructor(private onboardingService: OnboardingService) {}\n\n  ngOnInit(): void {}\n\n  /**\n   * tell parent component the user wants to visit next page\n   */\n  next() {\n    this.nextPage.emit(true);\n  }\n\n  /**\n   * if user is on first page in onboarding flow\n   */\n  isFirstPage(): boolean {\n    return this.onboardingService.currentPageIndex() === 0;\n  }\n\n  /**\n   * if user is on last page in onboarding flow\n   */\n  isLastPage(): boolean {\n    return (\n      this.onboardingService.currentPageIndex() ===\n      this.onboardingService.pages.length - 1\n    );\n  }\n\n  /**\n   * go to previous page\n   */\n  goBack() {\n    if (this.isFirstPage()) return;\n\n    this.onboardingService.currentView =\n      this.onboardingService.pages[\n        this.onboardingService.currentPageIndex() - 1\n      ];\n  }\n}\n","<div class=\"nav-btns\">\n  <div>\n    <button class=\"prev\" *ngIf=\"!isFirstPage()\" (click)=\"goBack()\">\n      PREVIOUS\n    </button>\n  </div>\n  <div>\n    <button class=\"next\" (click)=\"next()\">\n      {{ isLastPage() ? \"PUBLISH\" : \"NEXT\" }}\n    </button>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Company } from '../shared/company';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OnboardingService {\n  pages = ['basic-info', 'upload-deck', 'preview']; // pages in onboarding flow\n\n  currentView: string; // the page of the onboarding flow we are on\n\n  // where to send API reqs\n  serverUrl = environment.apiUrl + '/api/';\n\n  company: Company;\n\n  constructor(private http: HttpClient) {\n    this.currentView = this.pages[0];\n    this.company = <Company>{};\n  }\n\n  /**\n   * @returns index of current page in onboarding flow\n   */\n  currentPageIndex() {\n    return this.pages.findIndex((page) => page === this.currentView);\n  }\n\n  /**\n   * Go to next page in onboarding flow\n   */\n  nextPage() {\n    if (this.currentPageIndex() + 1 === this.pages.length) return;\n\n    this.currentView = this.pages[this.currentPageIndex() + 1];\n  }\n\n  /**\n   * creates company then returns it\n   */\n  createCompany(payload: { name: string; description: string }) {\n    return this.http.post<Company>(\n      this.serverUrl + 'company/newCompany',\n      payload\n    );\n  }\n\n  /**\n   *\n   * @param companyId\n   * @param file - Buffer of either ppt or pdf\n   * @returns modified company object\n   */\n  uploadDeck(companyId: string, formData: FormData) {\n    return this.http.put<Company>(\n      this.serverUrl + 'company/addDeck/' + companyId,\n      formData\n    );\n  }\n\n  /**\n   * updates company and returns updated company\n   */\n  updateCompany(companyId: string, payload: Partial<Company>) {\n    return this.http.put<Company>(\n      this.serverUrl + 'company/modify/' + companyId,\n      payload\n    );\n  }\n}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { slideContent } from 'src/app/shared/slideContent';\nimport { OnboardingService } from '../onboarding.service';\n\n@Component({\n  selector: 'app-preview',\n  templateUrl: './preview.component.html',\n  styleUrls: ['./preview.component.css'],\n})\nexport class PreviewComponent implements OnInit {\n  // sidepanel information in main onborading component\n  @Output() newSlide = new EventEmitter<slideContent>();\n  slideContent: slideContent = {\n    title: 'Everything look good?',\n    content:\n      \"When you're ready, publish your deck and start raising money from your customers\",\n    img: { fileName: 'preview.svg', alt: 'checkboard with green check' },\n  };\n\n  constructor(\n    public onboardingService: OnboardingService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    // tell main onboarding component to update sidebar to new info\n    this.newSlide.emit(this.slideContent);\n  }\n\n  /**\n   * mark company as published in db\n   * navigate user to published page\n   */\n  async publish() {\n    const payload = { published: true };\n    await this.onboardingService\n      .updateCompany(this.onboardingService.company._id, payload)\n      .toPromise();\n\n    // navigate to published companys page\n    this.router.navigate(['raise', this.onboardingService.company._id]);\n  }\n}\n","<h2>Preview your company page</h2>\n\n<div class=\"preview\">\n  <div class=\"top-bar\">\n    <div class=\"circles\">\n      <div id=\"red\"></div>\n      <div id=\"yellow\"></div>\n      <div id=\"green\"></div>\n    </div>\n  </div>\n  <div class=\"content\">\n    <app-individual-profile\n      [companyId]=\"onboardingService.company._id\"\n    ></app-individual-profile>\n  </div>\n</div>\n\n<app-nav-btns (nextPage)=\"publish()\"></app-nav-btns>\n","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { FileSystemFileEntry, NgxFileDropEntry } from 'ngx-file-drop';\nimport { slideContent } from 'src/app/shared/slideContent';\n\nimport { OnboardingService } from '../onboarding.service';\n\n@Component({\n  selector: 'app-upload-deck',\n  templateUrl: './upload-deck.component.html',\n  styleUrls: ['./upload-deck.component.css', './loader.css'],\n})\nexport class UploadDeckComponent implements OnInit {\n  fileUploadLoading = false; // for displaying loader\n  filename: string; // name of file being uploaded for display\n  nextPageAttempted = false; // if the user has pressed the next button. for display purposes\n  errorMessage: string; // error message back from server if any\n\n  // sidepanel information in main onborading component\n  @Output() newSlide = new EventEmitter<slideContent>();\n  slideContent: slideContent = {\n    title: 'Share your pitch',\n    content: \"We can't wait till help you show your pitch off to the world!\",\n    img: {\n      fileName: 'upload-deck.svg',\n      alt: 'folder or file being uploaded to the cloud',\n    },\n  };\n\n  constructor(public onboardingService: OnboardingService) {\n    this.filename = '';\n    this.errorMessage = '';\n  }\n\n  // see https://www.npmjs.com/package/ngx-file-drop for full documentation\n  public dropped(files: NgxFileDropEntry[]) {\n    // clear any error message on reupload\n    this.errorMessage = '';\n\n    const droppedFile = files[0];\n    const fileEntry = droppedFile.fileEntry as FileSystemFileEntry;\n    fileEntry.file(async (file: File) => {\n      // create FormData and add file information\n      const formData = new FormData();\n      formData.append('deck', file, droppedFile.relativePath);\n      this.filename = droppedFile.relativePath;\n\n      // show file loader\n      this.fileUploadLoading = true;\n\n      // upload file to server and save to company\n      const companyId = this.onboardingService.company._id;\n      const updatedCompany = await this.uploadFile(companyId, formData);\n      if (updatedCompany) this.onboardingService.company = updatedCompany;\n\n      // hide file loader\n      this.fileUploadLoading = false;\n    });\n  }\n\n  ngOnInit(): void {\n    // tell main onboarding component to update sidebar to new info\n    this.newSlide.emit(this.slideContent);\n  }\n\n  /**\n   * uploads deck and returns company with deck\n   */\n  async uploadFile(companyId: string, formData: FormData) {\n    try {\n      return await this.onboardingService\n        .uploadDeck(companyId, formData)\n        .toPromise();\n    } catch (e: any) {\n      this.errorMessage = e.statusText;\n    }\n  }\n\n  /**\n   * goes to next page in onboarding flow if no errors\n   */\n  nextPage() {\n    this.nextPageAttempted = true;\n    // if there is a slide deck allow it\n    if (this.onboardingService.company.deck.length > 0) {\n      // go to next page in onboarding\n      return this.onboardingService.nextPage();\n    }\n  }\n}\n","<h2>Upload pitch deck</h2>\n\n<div>\n  <!--     accept=\".pdf\" -->\n  <ngx-file-drop\n    dropZoneLabel=\"Drop files here\"\n    dropZoneClassName=\"dropbox\"\n    (onFileDrop)=\"dropped($event)\"\n    accept=\".pdf,.pptx,.ppt,.doc,.docx\"\n    [multiple]=\"false\"\n  >\n    <ng-template\n      ngx-file-drop-content-tmp\n      let-openFileSelector=\"openFileSelector\"\n    >\n      <div class=\"upload\">\n        <div *ngIf=\"!this.fileUploadLoading\" class=\"upload-center\">\n          <div\n            *ngIf=\"this.onboardingService.company.deck.length > 0\"\n            class=\"upload-center\"\n          >\n            <img src=\"../../../assets/check.svg\" alt=\"green check mark\" />\n            <p>\n              Success! Your\n              <span>{{ this.onboardingService.company.deck.length }}</span> page\n              pitch deck is ready to go.\n            </p>\n            <p class=\"info\" id=\"change\">Want to use a different deck?</p>\n            <label for=\"fileDrop\">Change</label>\n          </div>\n\n          <div\n            *ngIf=\"this.onboardingService.company.deck.length === 0\"\n            class=\"upload-center\"\n          >\n            <p>Drop your file here or <label for=\"fileDrop\">Browse</label></p>\n            <p class=\"info\">Max file size 50mb, Types: PDF, PPT, or DOC</p>\n          </div>\n        </div>\n\n        <div *ngIf=\"this.fileUploadLoading\" class=\"upload-center\">\n          <!-- loader from https://loading.io/css/ -->\n          <div class=\"lds-roller\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n          <p>Uploading, one moment please.</p>\n          <p>{{ filename }}</p>\n        </div>\n      </div>\n\n      <button\n        type=\"button\"\n        class=\"fileButton\"\n        id=\"fileDrop\"\n        (click)=\"openFileSelector()\"\n      >\n        Browse Files\n      </button>\n    </ng-template>\n  </ngx-file-drop>\n</div>\n<span\n  class=\"error\"\n  *ngIf=\"nextPageAttempted && this.onboardingService.company.deck.length === 0\"\n  >Please upload a deck before continouing</span\n>\n<span class=\"error\">{{ errorMessage }}</span>\n\n<app-nav-btns (nextPage)=\"nextPage()\"></app-nav-btns>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:3000',\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}